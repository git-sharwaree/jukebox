// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())// uuid here means 
  email          String    @unique
  provider       Provider 
  
  streams        Stream[]
  upvotes        Upvote[]
}

model Stream {
  id             String     @id @default(uuid())
  type           StreamType
  url            String
  extractedId    String // when u go to youtube =GhH1QWY6BDc&t=3985s this is an ex of extracedId
  title          String     @default("")
  smallImg       String     @default("")
  bigImg         String     @default("")
  active         Boolean    @default(true)
  upvotes        Upvote[]
  userId         String
  user           User       @relation(fields : [userId], references : [id])
  
}

model Upvote{
  id        String    @id @default(uuid())
  userId    String
  streamId  String 
  user      User      @relation(fields : [userId], references : [id])
  stream    Stream    @relation(fields : [streamId], references : [id])
  @@unique  ([userId,streamId]) // this means that a user can only upvote a stream once 
}

enum StreamType {
  Spotify
  Youtube 
}

// here streamer is someeone who has music room and speakers connected / stream amd end users can upvote 


enum Provider {
  Google
}